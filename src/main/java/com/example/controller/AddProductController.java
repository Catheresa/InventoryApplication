package com.example.controller;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.stage.Stage;
import javafx.scene.Node;
import java.io.IOException;
import java.net.URL;
import java.util.Optional;
import java.util.ResourceBundle;
import javafx.scene.control.Alert.AlertType;

/** A class that allows a user to add products.
   *FUTURE ENHANCEMENT: Allow user to grab and add multiple part ID's with one click.
   *FUTURE ENHANCEMENT: Allow user to press enter button rather than forcing user to click a button.
  */
public class AddProductController implements Initializable {
    // Product ID input field which is autogenerated.
    @FXML private TextField addProductIDInput;

    //Name or ID Search Field:
    @FXML private TextField addProductPartSearchInput;

    //Text Area for Error Notifications:
    @FXML private TextArea addProductTextArea;

    //Parts table and associated columns:
    @FXML private TableView<Part> addProductPartsTable;
    @FXML private TableColumn<Part, Integer> addProductPartID1;
    @FXML private TableColumn<Part, String> addProductPartName1;
    @FXML private TableColumn<Part, Integer> addProductInv1;
    @FXML private TableColumn<Part, Double> addProductPrice1;

    //Associated parts table and associated columns:
    @FXML private TableView<Part> addProductAssociatedPartsTable;
    @FXML private TableColumn<Part, Integer> addProductPartID2;
    @FXML private TableColumn<Part, String> addProductPartName2;
    @FXML private TableColumn<Part, Integer> addProductInv2;
    @FXML private TableColumn<Part, Double> addProductPartPrice2;

    //Input Fields to Add Product:
    @FXML private TextField addProductNameInput;
    @FXML private TextField addProductInvInput;
    @FXML private TextField addProductPriceInput;
    @FXML private TextField addProductMaxInput;
    @FXML private TextField addProductMinInput;

    /**The creation of a unique observable list to assist in adding to the associated parts. */
    ObservableList<Part> uniqueList = FXCollections.observableArrayList();
    Product identifiedProduct = new Product(1,"test", 1.00, 9,1, 10);
    boolean error = false;
    /** A method utilize to cancel and exit the product add screen.
     * @param actionEvent cancel add product. */
    @FXML
    public void onAddProductCancel(ActionEvent actionEvent) throws IOException{
        Alert addProductCancelled = new Alert(AlertType.CONFIRMATION);
        addProductCancelled.setTitle("Cancellation Confirmation");
        addProductCancelled.setHeaderText("Confirm");
        addProductCancelled.setContentText("Are you sure you wish to cancel?");

        Optional<ButtonType> result = addProductCancelled.showAndWait();
        if (result.isPresent() && result.get() == ButtonType.OK){
            Parent inventoryScreen = FXMLLoader.load(getClass().getResource("/com/example/pa/Inventory.fxml"));
            Scene inventoryScene = new Scene(inventoryScreen);
            Stage inventoryStage = (Stage)((Node) actionEvent.getSource()).getScene().getWindow();
            inventoryStage.setScene(inventoryScene);
            inventoryStage.show();
        }
    }

    /** A method to save a new product and data associated with that product.
     * @param actionEvent add product.*/
    @FXML
    public void onAddProductSave(ActionEvent actionEvent) throws IOException {
        int tempId = 0;
        String tempName = "";
        double tempPrice = 0.0;
        int tempStock = 0;
        int tempMin = 0;
        int tempMax = 0;

        try{
            if ((addProductNameInput.getText().isEmpty()) || (addProductInvInput.getText().isEmpty()) ||
                    (addProductPriceInput.getText().isEmpty()) || (addProductMinInput.getText().isEmpty()) || (addProductMaxInput.getText().isEmpty())){
                addProductTextArea.setWrapText(true);
                addProductTextArea.setText("All fields must be populated." + "\n");
                error = true;
            }else if(Double.parseDouble(addProductPriceInput.getText()) <= 0.0){
                addProductTextArea.setWrapText(true);
                addProductTextArea.appendText("Price must be a positive number and must be greater than $0.0." + "\n");
                error = true;
            }else if ((Integer.parseInt(addProductMinInput.getText()) >= Integer.parseInt(addProductMaxInput.getText()))){
                addProductTextArea.setWrapText(true);
                addProductTextArea.appendText("Min must be less than Max." + "\n");
                error = true;
            }else if ((Integer.parseInt(addProductInvInput.getText()) >= (Integer.parseInt(addProductMaxInput.getText()))) ||
                    ((Integer.parseInt(addProductInvInput.getText())) <= (Integer.parseInt(addProductMinInput.getText())))){
                addProductTextArea.setWrapText(true);
                addProductTextArea.appendText("Inventory should be between min/max quantities." + "\n");
                error = true;
            }else{error = false;}

            tempId = Integer.parseInt(addProductIDInput.getText());
            tempName = addProductNameInput.getText();
            tempPrice = Double.parseDouble(addProductPriceInput.getText());
            tempStock = Integer.parseInt(addProductInvInput.getText());
            tempMin = Integer.parseInt(addProductMinInput.getText());
            tempMax = Integer.parseInt(addProductMaxInput.getText());

        }catch(Exception e){
            addProductTextArea.setWrapText(true);
            addProductTextArea.appendText("Error" + e + '\n');
            error = true;
            }

        if(!error){
            Product product = new Product(tempId, tempName, tempPrice, tempStock, tempMin, tempMax);
            product.getAllAssociatedParts.addAll(uniqueList);
            Inventory.getAllProducts().add(product);

            Parent inventoryScreen = FXMLLoader.load(getClass().getResource("/com/example/pa/Inventory.fxml"));
            Scene inventoryScene = new Scene(inventoryScreen);
            Stage inventoryStage = (Stage)((Node) actionEvent.getSource()).getScene().getWindow();
            inventoryStage.setScene(inventoryScene);
            inventoryStage.show();
        }
    }
    /** A method that allows a user to remove an associated product part.
     * @param event remove associated part from product. */
    @FXML
    void onAddProductRemoveAssociatedPart(ActionEvent event) {
        Part selectedAssociatedPart;
        try{
            selectedAssociatedPart = addProductAssociatedPartsTable.getSelectionModel().getSelectedItem();
            identifiedProduct.getAllAssociatedParts.remove(selectedAssociatedPart);
            uniqueList.remove(selectedAssociatedPart);
            if(selectedAssociatedPart == null){
                throw new NullPointerException();
            }
        }catch(NullPointerException npe){
            addProductTextArea.setText("No associated part was selected.");
        }
    }
    /** A method that allows a user to search for parts in the add product screen.
     * @param event search by part name or ID. */
    @FXML
    void onAddProductPartSearchInput(ActionEvent event) {
        String partialName = addProductPartSearchInput.getText();
        ObservableList<Part> searchProductPartName = Inventory.lookupPart(partialName);
        addProductPartsTable.setItems(searchProductPartName);
        addProductTextArea.setText("");

        if(searchProductPartName.size() == 0){
            try{
                int tempID = Integer.parseInt(partialName);
                Part part = Inventory.lookupPart(tempID);
                if(part != null){
                    searchProductPartName.add(part);
                }else{throw new Exception();}
            }
            catch(Exception e){
                addProductTextArea.setWrapText(true);
                addProductTextArea.setText("No matching Product ID or Name found. Press 'Enter' to reload parts");
            }
        }
        addProductPartSearchInput.setText("");
    }

    /** A method that adds a part to a unique list which gets added to the associated parts list.
     * @param event add part to product. */
    @FXML
    void onAddProductPart(ActionEvent event) {
        Part selectedPart = addProductPartsTable.getSelectionModel().getSelectedItem();
        uniqueList.add(selectedPart);
    }
    /** A method that overrides the superclass.  In this case, the parts table and associated parts are added to product tables. */
    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        addProductIDInput.setText(String.valueOf(Inventory.getAllProducts().size()+1));

        addProductPartsTable.setItems(Inventory.getAllParts());
        addProductAssociatedPartsTable.setItems(uniqueList);

        addProductPartID1.setCellValueFactory(new PropertyValueFactory<>("id"));
        addProductPartName1.setCellValueFactory(new PropertyValueFactory<>("name"));
        addProductInv1.setCellValueFactory(new PropertyValueFactory<>("stock"));
        addProductPrice1.setCellValueFactory(new PropertyValueFactory<>("price"));

        addProductPartID2.setCellValueFactory(new PropertyValueFactory<>("id"));
        addProductPartName2.setCellValueFactory(new PropertyValueFactory<>("name"));
        addProductInv2.setCellValueFactory(new PropertyValueFactory<>("stock"));
        addProductPartPrice2.setCellValueFactory(new PropertyValueFactory<>("price"));
    }
}
